
                    <td>Doe</td>
                    <td>john.doe@example.com</td>
                </tr>
                <!-- Add more rows as needed -->
            </tbody>
        </table>

        <h2>Sample Form</h2>
        <form>
            <div class="form-group">
                <label for="exampleInputEmail1">Email address</label>
                <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
                <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            </div>
            <div class="form-group">
                <label for="exampleInputPassword1">Password</label>
                <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <!-- Include Bootstrap JS (optional for certain components) -->
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
-------------------------------------------------------------------------------------------------------
implementation:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=<device-width>, initial-scale=1.0">
    <title>Document</title>
  <script src="script.js"></script>  
    <!-- <script src="employee.js"></script> -->
    <!-- <script type="module" src="main.js"></script> -->
   
</head>
<body>
    <!-- <h1 id="message"></h1> -->
 <h1>I am a body of this Page</h1>
 
</body>
</html>
................
jscript:

/*
console.log("Hi");// dynamically typed programming language
var c=9; //outdated
let a=10;
const pi=3.14;
console.log('a value is '+a);
console.log('pi value is '+pi);
console.log('c value is '+c);
*/
 
/* //try alert box
let uname=prompt("Enter ur name?");
console.log("entered name is "+uname);
*/
 
/*
 
//if else
let age=60; let gender='female';
 
if(age>60 && gender=='female'){
console.log("u can avail special conc");
}
else
{
console.log("sorry , u can not");
}
 
console.log("bye");
 
*/
 
// Looping statement - for, while,do while
 
/*
for(let i=1;i<=5;i++){
  //  console.log("Hello");
    console.log(i);
 }
*/
 
/*
let i=10;
while(i>=1){
    console.log(i);
    i--;
 
}
*/
 
 
/*let i=10;
 
do{
    console.log(i);
    i--;
}
while(i>=1);
*/
 
/*
let arr=['Maria','priya','swathi','archu'];
//for loop
for(i=0;i<arr.length;i++){
    console.log(arr[i]);
}
//for each loop
for(let name1 of  arr){
    console.log(name1);
}
*/
 
/* //example function 1
 function addNumbers(a,b){// defining the function
    return a+b;
   
 }
 console.log(addNumbers(4,5)); // calling the function
console.log(addNumbers);
console.log(typeof(addNumbers));
*/
/*
//example function 2
function isPositive(num){
     return num>0
}
console.log(isPositive(3));
*/
/*
//example function 3
function sayHello(){
    console.log('Hello');
}
sayHello();//Hello
*/
 
/*
//example function 4 // default parameter
function greet(uname ='there'){
    console.log('hi',uname)
}
greet('Maria');
*/
/*
//example function 5
let isEven =function(num){
    return num%2==0
}
console.log(isEven(6));
*/
 
let volume=function(l,b,h){
    return l*b*h;
    }
  //  console.log(volume(1,2,3));
 
    let volume1=(l,b,h) =>l*b*h;
    console.log(volume1(1,2,3));

...............................................................................................

another jscript:

class Employee {
    // Private fields
    #name;
    #age;
 
    // Static field
    static company = 'Tech Corp';
 
    // Constructor
    constructor(name, age) {
        this.#name = name;
        this.#age = age;
    }
 
    // Getter for name
    get name() {
        return this.#name;
    }
// ==(value check) ===(type check)
    // Setter for name
    set name(newName) {
        if (typeof newName === 'string' && newName.length > 0) {
            this.#name = newName;
        } else {
            console.error('Invalid name');
        }
    }
 
    // Getter for age
    get age() {
        return this.#age;
    }
 
    // Setter for age
    set age(newAge) {
        if (Number.isInteger(newAge) && newAge > 0) {
            this.#age = newAge;
        } else {
            console.error('Invalid age');
        }
    }
 
    // Method
    describe() {
        console.log(`Employee: ${this.#name}, Age: ${this.#age}`);
    }
 
    // Static method
    static companyInfo() {
        console.log(`Company: ${Employee.company}`);
    }
 
    // Private method
    #privateMethod() {
        console.log('This is a private method.');
    }
 
    // Method to demonstrate access to private method
    publicMethod() {
        this.#privateMethod();
    }
}
 
// Creating an instance of the class
const emp1 = new Employee('Alice', 30);
 
// Accessing static method
Employee.companyInfo(); // Output: Company: Tech Corp
 
// Accessing instance methods
emp1.describe(); // Output: Employee: Alice, Age: 30
 
// Using getter and setter
console.log(emp1.name); // Output: Alice
emp1.name = 'Bob';
console.log(emp1.name); // Output: Bob
 
console.log(emp1.age); // Output: 30
emp1.age = 35;
console.log(emp1.age); // Output: 35
 
// Attempting to set invalid values
emp1.name = ''; // Output: Invalid name
emp1.age = -5; // Output: Invalid age
 
// Accessing public method which in turn accesses private method
emp1.publicMethod(); // Output: This is a private method.
 
 
 
 
 
 
/*
Private Fields:
Private fields are defined with the # prefix and can only
be accessed within the class.
#name;
#age;
 
Static Field:
Static fields are defined using the static keyword.
They are shared among all instances of the class.
static company = 'Tech Corp';
 
Constructor:
The constructor method is used to initialize the instance
properties.
constructor(name, age) {
    this.#name = name;
    this.#age = age;
}
 
Getter and Setter:
Getters and setters allow controlled access and modification
of private fields.
 
get name() {
    return this.#name;
}
 
set name(newName) {
    if (typeof newName === 'string' && newName.length > 0) {
        this.#name = newName;
    } else {
        console.error('Invalid name');
    }
}
 
Instance Methods:
Methods that operate on instances of the class.
describe() {
    console.log(`Employee: ${this.#name}, Age: ${this.#age}`);
}
 
Static Methods:
Methods that operate on the class itself rather than instances.
static companyInfo() {
    console.log(`Company: ${Employee.company}`);
}
 
Private Methods:
Private methods are also defined with the # prefix and can
only be called within the class.
#privateMethod() {
    console.log('This is a private method.');
}
*/

..............................................
eclipse use :

// Importing named exports
import { add, subtract } from './math.js';
 
// Importing default export
import pi from './math.js';
 
console.log('This is main class and the methods are exported from math.js');
console.log(add(2, 3));        // Output: 5
console.log(subtract(5, 3));   // Output: 2
console.log(pi);               // Output: 3.14159


...........................................................

ex:2

// Named export
export function add(a, b) {
    return a + b;
}
 
export function subtract(a, b) {
    return a - b;
}
 
// Default export
const pi = 3.14159;
export default pi;

------------------------------------------

Assignment 1:

// Create a user object
let user = {
    name: "John Doe",
    email: "johndoe@example.com",
    age: 30
};

// Function to change the user's name
function changeName(newUser) {
    user.name = newUser;
}

// Function to update the user's email
function updateEmail(newEmail) {
    user.email = newEmail;
}

// Function to calculate the user's birth year
function calculateBirthYear() {
    let currentYear = new Date().getFullYear();
    return currentYear - user.age;
}

// Test the functions
console.log("Original user:", user);
changeName("Jane Doe");
updateEmail("janedoe@example.com");
console.log("Updated user:", user);
console.log("Birth year:", calculateBirthYear());
-------------------------------------------------------
assignment 2:
html":

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Email Validation</title>
    <style>
        .error {
            color: red;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <form id="emailForm">
        <label for="email">Email:</label>
        <input type="text" id="email" name="email">
        <button type="submit">Submit</button>
        <div id="message" class="error"></div>
    </form>

    <script src="script.js"></script>
</body>
</html>

------------------------------------------------------------------------------------
jscript:

document.getElementById('emailForm').addEventListener('submit', function(event) {
    event.preventDefault();
    validateEmail();
});

function validateEmail() {
    const email = document.getElementById('email').value;
    const message = document.getElementById('message');
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (emailRegex.test(email)) {
        message.textContent = '';
        alert('Email is valid');
    } else {
        message.textContent = 'Invalid email format';
    }
}

--------------------------------------------
document.getElementById('emailForm').addEventListener('submit', function(event) {
    event.preventDefault();
    validateEmail();
});

function validateEmail() {
    const email = document.getElementById('email').value;
    const message = document.getElementById('message');
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (emailRegex.test(email)) {
        message.textContent = '';
        alert('Email is valid');
    } else {
        message.textContent = 'Invalid email format';
    }
}

--------------------------------------------------------
html url:::
file:///C:/Users/Administrator/Desktop/HTML,CSS,J%20SCRIPT%20,%20ANGULAR/demo4.html

---------------------------------------------------------------------------------------------
class1:

import java.util.LinkedList;

class ShoppingCart {
    private LinkedList<String> cart;

    public ShoppingCart() {
        cart = new LinkedList<>();
    }

    public void addItem(String item) {
        cart.add(item);
    }

    public void removeItem(String item) {
        cart.remove(item);
    }

    public void viewCart() {
        System.out.println("Items in cart: " + cart);
    }
}

class 2:
import java.util.LinkedList;
import java.util.Stack;

class PurchaseHistory {
    private Stack<LinkedList<String>> history;

    public PurchaseHistory() {
        history = new Stack<>();
    }

    public void saveCart(LinkedList<String> cart) {
        history.push(cart);
    }

    public LinkedList<String> undoPurchase() {
        if (!history.isEmpty()) {
            return history.pop();
        }
        return null;
    }

    public void viewHistory() {
        System.out.println("Purchase history: " + history);
    }
}

----------------------------------------------------------------------

class3:

import java.util.LinkedList;
import java.util.Queue;

class CustomerService {
    private Queue<String> serviceRequests;

    public CustomerService() {
        serviceRequests = new LinkedList<>();
    }

    public void addRequest(String request) {
        serviceRequests.add(request);
    }

    public void processRequest() {
        if (!serviceRequests.isEmpty()) {
            System.out.println("Processing request: " + serviceRequests.poll());
        } else {
            System.out.println("No pending requests.");
        }
    }

    public void viewRequests() {
        System.out.println("Pending service requests: " + serviceRequests);
    }
}

class4:

public class ShoppingApp {
    public static void main(String[] args) {
        ShoppingCart cart = new ShoppingCart();
        PurchaseHistory history = new PurchaseHistory();
        CustomerService service = new CustomerService();

        // Sample operations
        cart.addItem("Item 1");
        cart.addItem("Item 2");
        cart.viewCart();

        LinkedList<String> currentCart = new LinkedList<>(cart.cart);
        history.saveCart(currentCart);
        history.viewHistory();

        cart.removeItem("Item 1");
        cart.viewCart();

        LinkedList<String> undoCart = history.undoPurchase();
        if (undoCart != null) {
            System.out.println("Undoing last purchase.");
            cart.cart = undoCart;
            cart.viewCart();
        } else {
            System.out.println("Nothing to undo.");
        }

        service.addRequest("Request 1");
        service.addRequest("Request 2");
        service.viewRequests();
        service.processRequest();
        service.viewRequests();
    }
}

-------------------------------------------------------------------------------------------------
class 1:
class Book implements Comparable<Book> {
    private String title;
    private String author;
    private String ISBN;

    public Book(String title, String author, String ISBN) {
        this.title = title;
        this.author = author;
        this.ISBN = ISBN;
    }

    public String getTitle() {
        return title;
    }

    @Override
    public int compareTo(Book other) {
        return this.title.compareTo(other.title);
    }

    @Override
    public String toString() {
        return "Book{" +
                "title='" + title + '\'' +
                ", author='" + author + '\'' +
                ", ISBN='" + ISBN + '\'' +
                '}';
    }
}

class 2:

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

class Library {
    private List<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
        Collections.sort(books); // Ensure the list remains sorted for Binary Search
    }

    public void removeBook(String title) {
        books.removeIf(book -> book.getTitle().equals(title));
    }

    public Book linearSearchByTitle(String title) {
        for (Book book : books) {
            if (book.getTitle().equals(title)) {
                return book;
            }
        }
        return null;
    }

    public Book binarySearchByTitle(String title) {
        int low = 0;
        int high = books.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            Book midBook = books.get(mid);
            int cmp = midBook.getTitle().compareTo(title);

            if (cmp == 0) {
                return midBook;
            } else if (cmp < 0) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return null;
    }

    public void displayAllBooks() {
        System.out.println("Books in the library:");
        for (Book book : books) {
            System.out.println(book);
        }
    }
}


class 3:

public class LibraryManagementSystem {
    public static void main(String[] args) {
        Library library = new Library();

        // Adding books to the library
        library.addBook(new Book("Book1", "Author1", "ISBN1"));
        library.addBook(new Book("Book2", "Author2", "ISBN2"));
        library.addBook(new Book("Book3", "Author3", "ISBN3"));

        // Display all books
        library.displayAllBooks();

        // Linear Search
        System.out.println("Searching for Book2 using Linear Search:");
        Book linearSearchResult = library.linearSearchByTitle("Book2");
        System.out.println(linearSearchResult != null ? linearSearchResult : "Book not found");

        // Binary Search
        System.out.println("Searching for Book2 using Binary Search:");
        Book binarySearchResult = library.binarySearchByTitle("Book2");
        System.out.println(binarySearchResult != null ? binarySearchResult : "Book not found");
    }
}
----------------------------------------------------------------------------

